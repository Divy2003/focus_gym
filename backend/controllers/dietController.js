// controllers/dietController.js
const DietPlan = require('../models/DietPlan');
const cloudinary = require('cloudinary').v2;
const puppeteer = require('puppeteer');
const handlebars = require('handlebars');
const fs = require('fs').promises;
const path = require('path');
const { validationResult } = require('express-validator');

// Configure Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
});

// HTML template for PDF generation
const dietPlanTemplate = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>{{title}} - Diet Plan</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; color: #333; }
        .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #4CAF50; padding-bottom: 20px; }
        .header h1 { color: #4CAF50; margin: 0; font-size: 28px; }
        .header p { margin: 5px 0; color: #666; }
        .info-section { display: flex; justify-content: space-between; margin-bottom: 30px; }
        .info-box { background: #f8f9fa; padding: 15px; border-radius: 8px; min-width: 200px; }
        .info-box h3 { margin: 0 0 10px 0; color: #4CAF50; }
        .meals-section { margin-bottom: 30px; }
        .meal { margin-bottom: 25px; border: 1px solid #ddd; border-radius: 8px; overflow: hidden; }
        .meal-header { background: #4CAF50; color: white; padding: 15px; }
        .meal-header h3 { margin: 0; font-size: 18px; }
        .meal-content { padding: 15px; }
        .food-items { margin: 15px 0; }
        .food-item { display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid #eee; }
        .food-item:last-child { border-bottom: none; }
        .instructions { background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 4px; padding: 10px; margin-top: 10px; }
        .notes { background: #d1ecf1; border: 1px solid #bee5eb; border-radius: 4px; padding: 15px; margin-top: 20px; }
        .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; color: #666; }
    </style>
</head>
<body>
    <div class="header">
        <h1>{{title}}</h1>
        <p>Target Audience: {{targetAudience}}</p>
        <p>Duration: {{duration}}</p>
    </div>
    
    <div class="info-section">
        <div class="info-box">
            <h3>Total Calories</h3>
            <p>{{totalCalories}} kcal/day</p>
        </div>
        <div class="info-box">
            <h3>Plan Duration</h3>
            <p>{{duration}}</p>
        </div>
    </div>
    
    <div class="meals-section">
        <h2>Daily Meal Plan</h2>
        {{#each meals}}
        <div class="meal">
            <div class="meal-header">
                <h3>{{name}} - {{time}}</h3>
            </div>
            <div class="meal-content">
                <div class="food-items">
                    {{#each items}}
                    <div class="food-item">
                        <span><strong>{{food}}</strong></span>
                        <span>{{quantity}} ({{calories}} kcal)</span>
                    </div>
                    {{/each}}
                </div>
                {{#if instructions}}
                <div class="instructions">
                    <strong>Instructions:</strong> {{instructions}}
                </div>
                {{/if}}
            </div>
        </div>
        {{/each}}
    </div>
    
    {{#if notes}}
    <div class="notes">
        <h3>Additional Notes:</h3>
        <p>{{notes}}</p>
    </div>
    {{/if}}
    
    <div class="footer">
        <p>Generated by Gym Management System - {{generatedDate}}</p>
        <p>For any queries, contact your gym trainer.</p>
    </div>
</body>
</html>
`;

// Create diet plan
const createDietPlan = async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: 'Validation errors',
        errors: errors.array()
      });
    }

    const dietPlanData = {
      ...req.body,
      createdBy: req.admin.adminId
    };

    // Calculate total calories
    let totalCalories = 0;
    if (dietPlanData.meals) {
      dietPlanData.meals.forEach(meal => {
        if (meal.items) {
          meal.items.forEach(item => {
            totalCalories += item.calories || 0;
          });
        }
      });
    }
    dietPlanData.totalCalories = totalCalories;

    const dietPlan = new DietPlan(dietPlanData);
    await dietPlan.save();

    // Generate PDF
    try {
      const pdfUrl = await generateDietPlanPDF(dietPlan);
      dietPlan.pdfUrl = pdfUrl.secure_url;
      dietPlan.cloudinaryPublicId = pdfUrl.public_id;
      await dietPlan.save();
    } catch (pdfError) {
      console.error('PDF generation error:', pdfError);
      // Continue without PDF if generation fails
    }

    res.status(201).json({
      success: true,
      message: 'Diet plan created successfully',
      dietPlan
    });
  } catch (error) {
    console.error('Create diet plan error:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to create diet plan'
    });
  }
};

// Generate PDF for diet plan
const generateDietPlanPDF = async (dietPlan) => {
  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  try {
    const page = await browser.newPage();
    
    // Compile template
    const template = handlebars.compile(dietPlanTemplate);
    const html = template({
      ...dietPlan.toObject(),
      generatedDate: new Date().toLocaleDateString('en-IN'),
      targetAudience: dietPlan.targetAudience.replace('_', ' ').toUpperCase()
    });
    
    await page.setContent(html, { waitUntil: 'networkidle0' });
    
    const pdfBuffer = await page.pdf({
      format: 'A4',
      printBackground: true,
      margin: {
        top: '20px',
        right: '20px',
        bottom: '20px',
        left: '20px'
      }
    });
    
    // Upload to Cloudinary
    const uploadResult = await new Promise((resolve, reject) => {
      cloudinary.uploader.upload_stream(
        {
          resource_type: 'raw',
          public_id: `diet_plans/${dietPlan._id}_${Date.now()}`,
          format: 'pdf'
        },
        (error, result) => {
          if (error) reject(error);
          else resolve(result);
        }
      ).end(pdfBuffer);
    });
    
    return uploadResult;
  } finally {
    await browser.close();
  }
};

// Get all diet plans
const getDietPlans = async (req, res) => {
  try {
    const { page = 1, limit = 10, search = '', targetAudience = '' } = req.query;

    const query = { isActive: true };

    if (search) {
      query.title = { $regex: search, $options: 'i' };
    }

    if (targetAudience) {
      query.targetAudience = targetAudience;
    }

    const dietPlans = await DietPlan.find(query)
      .populate('createdBy', 'name')
      .sort({ createdAt: -1 })
      .limit(limit * 1)
      .skip((page - 1) * limit);

    const total = await DietPlan.countDocuments(query);

    res.status(200).json({
      success: true,
      dietPlans,
      pagination: {
        current: page,
        total: Math.ceil(total / limit),
        count: dietPlans.length,
        totalPlans: total
      }
    });
  } catch (error) {
    console.error('Get diet plans error:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to fetch diet plans'
    });
  }
};

// Get single diet plan
const getDietPlan = async (req, res) => {
  try {
    const { id } = req.params;

    const dietPlan = await DietPlan.findById(id)
      .populate('createdBy', 'name');

    if (!dietPlan || !dietPlan.isActive) {
      return res.status(404).json({
        success: false,
        message: 'Diet plan not found'
      });
    }

    res.status(200).json({
      success: true,
      dietPlan
    });
  } catch (error) {
    console.error('Get diet plan error:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to fetch diet plan'
    });
  }
};

// Update diet plan
const updateDietPlan = async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: 'Validation errors',
        errors: errors.array()
      });
    }

    const { id } = req.params;
    const updateData = req.body;

    // Calculate total calories if meals are updated
    if (updateData.meals) {
      let totalCalories = 0;
      updateData.meals.forEach(meal => {
        if (meal.items) {
          meal.items.forEach(item => {
            totalCalories += item.calories || 0;
          });
        }
      });
      updateData.totalCalories = totalCalories;
    }

    const dietPlan = await DietPlan.findByIdAndUpdate(id, updateData, { new: true });
    if (!dietPlan) {
      return res.status(404).json({
        success: false,
        message: 'Diet plan not found'
      });
    }

    // Regenerate PDF if content changed
    if (updateData.meals || updateData.title || updateData.notes) {
      try {
        // Delete old PDF from Cloudinary
        if (dietPlan.cloudinaryPublicId) {
          await cloudinary.uploader.destroy(dietPlan.cloudinaryPublicId, { resource_type: 'raw' });
        }

        // Generate new PDF
        const pdfUrl = await generateDietPlanPDF(dietPlan);
        dietPlan.pdfUrl = pdfUrl.secure_url;
        dietPlan.cloudinaryPublicId = pdfUrl.public_id;
        await dietPlan.save();
      } catch (pdfError) {
        console.error('PDF regeneration error:', pdfError);
      }
    }

    res.status(200).json({
      success: true,
      message: 'Diet plan updated successfully',
      dietPlan
    });
  } catch (error) {
    console.error('Update diet plan error:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to update diet plan'
    });
  }
};

// Delete diet plan
const deleteDietPlan = async (req, res) => {
  try {
    const { id } = req.params;

    const dietPlan = await DietPlan.findById(id);
    if (!dietPlan) {
      return res.status(404).json({
        success: false,
        message: 'Diet plan not found'
      });
    }

    // Delete PDF from Cloudinary
    if (dietPlan.cloudinaryPublicId) {
      try {
        await cloudinary.uploader.destroy(dietPlan.cloudinaryPublicId, { resource_type: 'raw' });
      } catch (cloudinaryError) {
        console.error('Cloudinary delete error:', cloudinaryError);
      }
    }

    // Soft delete
    dietPlan.isActive = false;
    await dietPlan.save();

    res.status(200).json({
      success: true,
      message: 'Diet plan deleted successfully'
    });
  } catch (error) {
    console.error('Delete diet plan error:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to delete diet plan'
    });
  }
};

module.exports = {
  createDietPlan,
  getDietPlans,
  getDietPlan,
  updateDietPlan,
  deleteDietPlan
};
